
runme.createRep(xmlDoc) creates the following object: 

    defRep: 
      process // array of process definition representations
        attr  // map {id => value} of attributes of process elem (id => value)
        nodes // map {id => node} of executable node objects
        seq   // array of executable sequence flow objects

runme.createGraph(defRep) adds the following to the same object: 

    defRep
      process 
        graph // graph representation


runme.compileInstance(defRep) adds the following to the same object: 

    defRep 
      process 
        inst // this is the process instance that can be process by the engine

if debug is *off*, then the following elements are deleted: 

    defRep
      process 
        nodes // these nodes are now present in the inst
        seq   // 
        graph // array of executable sequence flow objects


- Work on creating process instances with branches, loops and subprocesses
   - instance/execution: STARTED, UNFINISHED
     - compileInstance (subfunction to createInstance): 
       . no stopping at "preMerge" -- follow "branch" until end
       . back and forth between: traverseBranch() and traverseFork()
     - optimizeInstance? (subfunction in compileInstance?)
       . figures out shortest branches, resets branch info, etc.

! add test for gateway/InclusiveGatewayTest.testDivergingInclusiveGateway.bpmn20.xml
  - end node is _after_ merge node (not the same as)

- left over: 
  - make sure testing is more extensive and covers everything.. 
    - current tests  don't have all of the tests they should have
    - gateways
    - end events: terminate, etc. 
      -> "event bus" mechanism necessary to communicate
  - condition expressios
    - in particular that the condition expressions, of all sorts,
      can be parsed and added to the rep. 
    - decide what to do with: 
      - xpath
      - tFormalExpression
      - bpmn2: prefix
      - .. etc. 

engine: 
  while( running ) { 
    candyString[i].execute(context) { 
      if( terminate ) { 
         // modify context to reflect that
      }

      if( context.terminate )  {
        // stop, signal stops
      }

looked into vert.x event bus
- read async javascript for info on single-threaded/browser/worker model

  - compileInstance() doesn't insert the closures yet? 
    - just does the graph compilation
    - need to do candy string compilation

